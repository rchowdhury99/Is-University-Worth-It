select(University, Province, international_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_undergraduate$international_undergraduate_tuition =
as.numeric(gsub(",","", international_undergraduate$international_undergraduate_tuition))
######################################################################################################################
domestic_graduate =
univcan_data %>%
mutate(domestic_graduate_tuition = str_extract(Graduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_graduate$domestic_graduate_tuition =
as.numeric(gsub(",", "", domestic_graduate$domestic_graduate_tuition))
######################################################################################################################
international_graduate =
univcan_data %>%
mutate(international_graduate_tuition = str_extract(Graduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_graduate$international_graduate_tuition =
as.numeric(gsub(",","", international_graduate$international_graduate_tuition))
# f_path = file.choose()
# lfs =
#   read_csv(f_path) %>%
#   filter(prov == 35)
#
# # lfs = read_csv("data/LFS_Toronto.csv")
f_path = file.choose()
## echo=FALSE stops the code chunk from appearing in the html document
## warning=FALSE / message=FALSE stop R warnings/messages from appearing in the knit document
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
timeToAmortize <- function(yearEarning, tuition, yearsOfStudy){
time = (tuition*yearsOfStudy)/yearEarning
return(time)
}
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
univcan_data =
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>%
as.data.frame()
univcan_data = univcan_data[-1,]
domestic_undergraduate =
univcan_data %>%
mutate(domestic_undergraduate_tuition = str_extract(Undergraduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_undergraduate$domestic_undergraduate_tuition =
as.numeric(gsub(",","",domestic_undergraduate$domestic_undergraduate_tuition))
######################################################################################################################
international_undergraduate =
univcan_data %>%
mutate(international_undergraduate_tuition = str_extract(Undergraduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_undergraduate$international_undergraduate_tuition =
as.numeric(gsub(",","", international_undergraduate$international_undergraduate_tuition))
######################################################################################################################
domestic_graduate =
univcan_data %>%
mutate(domestic_graduate_tuition = str_extract(Graduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_graduate$domestic_graduate_tuition =
as.numeric(gsub(",", "", domestic_graduate$domestic_graduate_tuition))
######################################################################################################################
international_graduate =
univcan_data %>%
mutate(international_graduate_tuition = str_extract(Graduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_graduate$international_graduate_tuition =
as.numeric(gsub(",","", international_graduate$international_graduate_tuition))
# f_path = file.choose()
# lfs =
#   read_csv(f_path) %>%
#   filter(prov == 35)
#
# # lfs = read_csv("data/LFS_Toronto.csv")
f_path = file.choose()
## echo=FALSE stops the code chunk from appearing in the html document
## warning=FALSE / message=FALSE stop R warnings/messages from appearing in the knit document
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
timeToAmortize <- function(yearEarning, tuition, yearsOfStudy){
time = (tuition*yearsOfStudy)/yearEarning
return(time)
}
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
univcan_data =
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>%
as.data.frame()
univcan_data = univcan_data[-1,]
domestic_undergraduate =
univcan_data %>%
mutate(domestic_undergraduate_tuition = str_extract(Undergraduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_undergraduate$domestic_undergraduate_tuition =
as.numeric(gsub(",","",domestic_undergraduate$domestic_undergraduate_tuition))
######################################################################################################################
international_undergraduate =
univcan_data %>%
mutate(international_undergraduate_tuition = str_extract(Undergraduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_undergraduate$international_undergraduate_tuition =
as.numeric(gsub(",","", international_undergraduate$international_undergraduate_tuition))
######################################################################################################################
domestic_graduate =
univcan_data %>%
mutate(domestic_graduate_tuition = str_extract(Graduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_graduate$domestic_graduate_tuition =
as.numeric(gsub(",", "", domestic_graduate$domestic_graduate_tuition))
######################################################################################################################
international_graduate =
univcan_data %>%
mutate(international_graduate_tuition = str_extract(Graduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_graduate$international_graduate_tuition =
as.numeric(gsub(",","", international_graduate$international_graduate_tuition))
# f_path = file.choose()
# lfs =
#   read_csv(f_path) %>%
#   filter(prov == 35)
#
# # lfs = read_csv("data/LFS_Toronto.csv")
f_path = file.choose()
lfs = read_csv(f_path)
lfs_ontario = lfs %>% filter(prov==35) #for Ontario
# lfs_toronto = read_csv("data/LFS_Toronto.csv")
hours_per_year = 8 * 5 * 4 * 12
avg_annual_income_undergraduate =
lfs_ontario %>%
filter(educ == 5) %>%
select(hrlyearn) %>%
mutate(annual_income = hrlyearn * hours_per_year) %>% na.omit() %>%
summarise(avg_annual_income_undergraduate = mean(annual_income)) %>%
pull()
##################################################################################
avg_annual_income_graduate =
lfs_ontario %>%
filter(educ == 6) %>%
select(hrlyearn) %>%
mutate(annual_income = hrlyearn * hours_per_year) %>% na.omit() %>%
summarise(avg_annual_income_graduate = mean(annual_income)) %>%
pull()
# loading data sets
canUndergrad = read_csv("data/can-undergrad.csv")
canGrad = read_csv("data/can-grad.csv")
interUndergrad = read_csv("data/inter-undergrad.csv")
interGrad = read_csv("data/inter-grad.csv")
income = read_csv("data/income6.csv")
income = group_by(income, CorrespondingTo) %>%
summarise(avgIncome = mean(`Average after-tax income ($)`)) %>%
rename(Field_of_study = 'CorrespondingTo')
#indent function to show implementation clearer
mostWorthIt <- function(dat, yearsOfStudy){
dat = dat %>% rename(y1 = '2014-2015', y2 = '2015-2016', y3 = '2016-2017', y4 = '2017-2018', y5 = '2018-2019') %>%
mutate(avgTuition = (`y1` + `y2` + `y3` + `y4` + `y5`)/5) %>%
right_join(income, by = "Field_of_study") %>%
mutate(amortizeTime = timeToAmortize(avgIncome, avgTuition, yearsOfStudy)) %>%
arrange(amortizeTime) %>% head(1) %>%
select(Field_of_study, avgTuition, avgIncome, amortizeTime)
return(dat)
}
leastWorthIt <- function(dat, yearsOfStudy){
dat = dat %>% rename(y1 = '2014-2015', y2 = '2015-2016', y3 = '2016-2017', y4 = '2017-2018', y5 = '2018-2019') %>%
mutate(avgTuition = (`y1` + `y2` + `y3` + `y4` + `y5`)/5) %>%
right_join(income, by = "Field_of_study") %>%
mutate(amortizeTime = timeToAmortize(avgIncome, avgTuition, yearsOfStudy)) %>%
arrange(desc(amortizeTime)) %>% head(1) %>%
select(Field_of_study, avgTuition, avgIncome, amortizeTime)
return(dat)
}
domestic_international_undergraduate =
left_join(domestic_undergraduate, international_undergraduate, by = "University")
domestic_international_undergraduate %>%
ggplot(aes(x = University, y = Tuition, color = TypeOfStudent)) +
geom_point(aes(y = domestic_undergraduate_tuition, col = "Domestic")) +
geom_point(aes(y = international_undergraduate_tuition, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
domestic_international_undergraduate =
domestic_international_undergraduate %>%
mutate(time_to_amortize_domestic = domestic_international_undergraduate$domestic_undergraduate_tuition*4/avg_annual_income_undergraduate,
time_to_amortize_international = domestic_international_undergraduate$international_undergraduate_tuition*4/avg_annual_income_undergraduate) %>%
select(University, domestic_undergraduate_tuition, time_to_amortize_domestic, international_undergraduate_tuition, time_to_amortize_international) %>% na.omit()
domestic_international_undergraduate %>%
ggplot(aes(x = University, y = Time_To_Amortize, color = TypeOfStudent)) +
geom_point(aes(y = time_to_amortize_domestic, col = "Domestic")) +
geom_point(aes(y = time_to_amortize_international, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ylab("Time to Amortize in years")
domestic_international_graduate =
left_join(domestic_graduate, international_graduate, by = "University")
domestic_international_graduate %>%
ggplot(aes(x = University, y = Tuition, color = TypeOfStudent)) +
geom_point(aes(y = domestic_graduate_tuition, col = "Domestic")) +
geom_point(aes(y = international_graduate_tuition, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
domestic_international_graduate =
domestic_international_graduate %>%
mutate(time_to_amortize_domestic = domestic_international_graduate$domestic_graduate_tuition*2/avg_annual_income_graduate,
time_to_amortize_international = domestic_international_graduate$international_graduate_tuition*2/avg_annual_income_graduate) %>%
select(University, domestic_graduate_tuition, time_to_amortize_domestic, international_graduate_tuition, time_to_amortize_international)
domestic_international_graduate %>%
ggplot(aes(x = University, y = Time_To_Amortize, color = TypeOfStudent)) +
geom_point(aes(y = time_to_amortize_domestic, col = "Domestic")) +
geom_point(aes(y = time_to_amortize_international, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ylab("Time to Amortize in years")
# Undergraduate
avg_time_to_amortize_domestic_undergraduate =
domestic_international_undergraduate %>%
summarise(avg_time_to_amortize_domestic = mean(domestic_international_undergraduate$time_to_amortize_domestic)) %>%
pull()
avg_time_to_amortize_international_undergraduate =
domestic_international_undergraduate %>%
summarise(avg_time_to_amortize_international = mean(domestic_international_undergraduate$time_to_amortize_international)) %>%
pull()
# Graduate
avg_time_to_amortize_domestic_graduate =
domestic_international_graduate %>%
summarise(avg_time_to_amortize_domestic = mean(domestic_international_graduate$time_to_amortize_domestic)) %>%
pull()
avg_time_to_amortize_international_graduate =
domestic_international_graduate %>%
summarise(avg_time_to_amortize_international = mean(domestic_international_graduate$time_to_amortize_international)) %>%
pull()
amortize_table =
data_frame(Amortize_Time = c(avg_time_to_amortize_domestic_undergraduate,
avg_time_to_amortize_international_undergraduate,
avg_time_to_amortize_domestic_graduate,
avg_time_to_amortize_international_graduate),
Student_type = c("Domestic", "International", "Domestic", "International"),
Degree_type = c("Undergraduate", "Undergraduate", "Graduate", "Graduate"))
amortize_table %>%
ggplot(aes(fill=Student_type, y=Amortize_Time, x=Degree_type)) +
geom_bar(position="dodge", stat="identity") +
xlab("Degree") +
ylab("Time to Amortize in years")
mostWorthIt(canUndergrad, 4)
mostWorthIt(interUndergrad, 4)
mostWorthIt(canGrad, 2)
mostWorthIt(interGrad, 2)
leastWorthIt(canUndergrad, 4)
leastWorthIt(interUndergrad, 4)
leastWorthIt(canGrad, 2)
leastWorthIt(interGrad, 2)
lfs_ontario %>% filter(lfsstat !=4 & educ %in% 2:6) %>%
mutate(educ = factor(educ), unempl = (lfsstat == 3)) %>%
ggplot(aes(x=educ, fill=unempl))+
geom_bar(position = "fill")+
xlab("Educational attainment")+
labs(fill="Unemployed")
ontario_unemplrate = lfs_ontario %>%
summarise(UNEMPL = sum(lfsstat == 3)/sum(lfsstat!=4)) %>% pull()
lfs_ontario %>%
filter(educ %in% 2:6) %>% # lfsstat == 3  unemployed
mutate(educ = factor(educ)) %>%
group_by(educ) %>%
summarise(UNEMPLrate = sum(lfsstat == 3)/sum(lfsstat != 4)) %>%
arrange(UNEMPLrate) %>%
mutate(Difference_from_Ontario_UNEMPLrate = UNEMPLrate - ontario_unemplrate)
lfs_ontario %>% select(lfsstat, educ) %>%
filter(lfsstat !=4 & educ %in% 2:6) %>%
mutate(educ = factor(educ), unempl = factor(lfsstat == 3)) %>%
chisq_test(unempl ~ educ, data = .,
distribution = "approx")
## echo=FALSE stops the code chunk from appearing in the html document
## warning=FALSE / message=FALSE stop R warnings/messages from appearing in the knit document
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(coin)
library(broom)
timeToAmortize <- function(yearEarning, tuition, yearsOfStudy){
time = (tuition*yearsOfStudy)/yearEarning
return(time)
}
## echo=FALSE stops the code chunk from appearing in the html document
## warning=FALSE / message=FALSE stop R warnings/messages from appearing in the knit document
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
library(coin)
library(broom)
timeToAmortize <- function(yearEarning, tuition, yearsOfStudy){
time = (tuition*yearsOfStudy)/yearEarning
return(time)
}
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
univcan_data =
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>%
as.data.frame()
univcan_data = univcan_data[-1,]
domestic_undergraduate =
univcan_data %>%
mutate(domestic_undergraduate_tuition = str_extract(Undergraduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_undergraduate$domestic_undergraduate_tuition =
as.numeric(gsub(",","",domestic_undergraduate$domestic_undergraduate_tuition))
######################################################################################################################
international_undergraduate =
univcan_data %>%
mutate(international_undergraduate_tuition = str_extract(Undergraduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_undergraduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_undergraduate$international_undergraduate_tuition =
as.numeric(gsub(",","", international_undergraduate$international_undergraduate_tuition))
######################################################################################################################
domestic_graduate =
univcan_data %>%
mutate(domestic_graduate_tuition = str_extract(Graduate, "(\\d+)[^-*]*$")) %>%
select(University, Province, domestic_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
domestic_graduate$domestic_graduate_tuition =
as.numeric(gsub(",", "", domestic_graduate$domestic_graduate_tuition))
######################################################################################################################
international_graduate =
univcan_data %>%
mutate(international_graduate_tuition = str_extract(Graduate.1, "(\\d+)[^-*]*$")) %>%
select(University, Province, international_graduate_tuition) %>%
filter(Province == "Ontario") %>% na.omit()
international_graduate$international_graduate_tuition =
as.numeric(gsub(",","", international_graduate$international_graduate_tuition))
# f_path = file.choose()
# lfs =
#   read_csv(f_path) %>%
#   filter(prov == 35)
#
# # lfs = read_csv("data/LFS_Toronto.csv")
f_path = file.choose()
lfs = read_csv(f_path)
lfs_ontario = lfs %>% filter(prov==35) #for Ontario
# lfs_toronto = read_csv("data/LFS_Toronto.csv")
hours_per_year = 8 * 5 * 4 * 12
avg_annual_income_undergraduate =
lfs_ontario %>%
filter(educ == 5) %>%
select(hrlyearn) %>%
mutate(annual_income = hrlyearn * hours_per_year) %>% na.omit() %>%
summarise(avg_annual_income_undergraduate = mean(annual_income)) %>%
pull()
##################################################################################
avg_annual_income_graduate =
lfs_ontario %>%
filter(educ == 6) %>%
select(hrlyearn) %>%
mutate(annual_income = hrlyearn * hours_per_year) %>% na.omit() %>%
summarise(avg_annual_income_graduate = mean(annual_income)) %>%
pull()
# loading data sets
canUndergrad = read_csv("data/can-undergrad.csv")
canGrad = read_csv("data/can-grad.csv")
interUndergrad = read_csv("data/inter-undergrad.csv")
interGrad = read_csv("data/inter-grad.csv")
income = read_csv("data/income6.csv")
income = group_by(income, CorrespondingTo) %>%
summarise(avgIncome = mean(`Average after-tax income ($)`)) %>%
rename(Field_of_study = 'CorrespondingTo')
#indent function to show implementation clearer
mostWorthIt <- function(dat, yearsOfStudy){
dat = dat %>% rename(y1 = '2014-2015', y2 = '2015-2016', y3 = '2016-2017', y4 = '2017-2018', y5 = '2018-2019') %>%
mutate(avgTuition = (`y1` + `y2` + `y3` + `y4` + `y5`)/5) %>%
right_join(income, by = "Field_of_study") %>%
mutate(amortizeTime = timeToAmortize(avgIncome, avgTuition, yearsOfStudy)) %>%
arrange(amortizeTime) %>% head(1) %>%
select(Field_of_study, avgTuition, avgIncome, amortizeTime)
return(dat)
}
leastWorthIt <- function(dat, yearsOfStudy){
dat = dat %>% rename(y1 = '2014-2015', y2 = '2015-2016', y3 = '2016-2017', y4 = '2017-2018', y5 = '2018-2019') %>%
mutate(avgTuition = (`y1` + `y2` + `y3` + `y4` + `y5`)/5) %>%
right_join(income, by = "Field_of_study") %>%
mutate(amortizeTime = timeToAmortize(avgIncome, avgTuition, yearsOfStudy)) %>%
arrange(desc(amortizeTime)) %>% head(1) %>%
select(Field_of_study, avgTuition, avgIncome, amortizeTime)
return(dat)
}
domestic_international_undergraduate =
left_join(domestic_undergraduate, international_undergraduate, by = "University")
domestic_international_undergraduate %>%
ggplot(aes(x = University, y = Tuition, color = TypeOfStudent)) +
geom_point(aes(y = domestic_undergraduate_tuition, col = "Domestic")) +
geom_point(aes(y = international_undergraduate_tuition, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
domestic_international_undergraduate =
domestic_international_undergraduate %>%
mutate(time_to_amortize_domestic = domestic_international_undergraduate$domestic_undergraduate_tuition*4/avg_annual_income_undergraduate,
time_to_amortize_international = domestic_international_undergraduate$international_undergraduate_tuition*4/avg_annual_income_undergraduate) %>%
select(University, domestic_undergraduate_tuition, time_to_amortize_domestic, international_undergraduate_tuition, time_to_amortize_international) %>% na.omit()
domestic_international_undergraduate %>%
ggplot(aes(x = University, y = Time_To_Amortize, color = TypeOfStudent)) +
geom_point(aes(y = time_to_amortize_domestic, col = "Domestic")) +
geom_point(aes(y = time_to_amortize_international, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ylab("Time to Amortize in years")
domestic_international_graduate =
left_join(domestic_graduate, international_graduate, by = "University")
domestic_international_graduate %>%
ggplot(aes(x = University, y = Tuition, color = TypeOfStudent)) +
geom_point(aes(y = domestic_graduate_tuition, col = "Domestic")) +
geom_point(aes(y = international_graduate_tuition, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
domestic_international_graduate =
domestic_international_graduate %>%
mutate(time_to_amortize_domestic = domestic_international_graduate$domestic_graduate_tuition*2/avg_annual_income_graduate,
time_to_amortize_international = domestic_international_graduate$international_graduate_tuition*2/avg_annual_income_graduate) %>%
select(University, domestic_graduate_tuition, time_to_amortize_domestic, international_graduate_tuition, time_to_amortize_international)
domestic_international_graduate %>%
ggplot(aes(x = University, y = Time_To_Amortize, color = TypeOfStudent)) +
geom_point(aes(y = time_to_amortize_domestic, col = "Domestic")) +
geom_point(aes(y = time_to_amortize_international, col = "International")) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
ylab("Time to Amortize in years")
# Undergraduate
avg_time_to_amortize_domestic_undergraduate =
domestic_international_undergraduate %>%
summarise(avg_time_to_amortize_domestic = mean(domestic_international_undergraduate$time_to_amortize_domestic)) %>%
pull()
avg_time_to_amortize_international_undergraduate =
domestic_international_undergraduate %>%
summarise(avg_time_to_amortize_international = mean(domestic_international_undergraduate$time_to_amortize_international)) %>%
pull()
# Graduate
avg_time_to_amortize_domestic_graduate =
domestic_international_graduate %>%
summarise(avg_time_to_amortize_domestic = mean(domestic_international_graduate$time_to_amortize_domestic)) %>%
pull()
avg_time_to_amortize_international_graduate =
domestic_international_graduate %>%
summarise(avg_time_to_amortize_international = mean(domestic_international_graduate$time_to_amortize_international)) %>%
pull()
amortize_table =
data_frame(Amortize_Time = c(avg_time_to_amortize_domestic_undergraduate,
avg_time_to_amortize_international_undergraduate,
avg_time_to_amortize_domestic_graduate,
avg_time_to_amortize_international_graduate),
Student_type = c("Domestic", "International", "Domestic", "International"),
Degree_type = c("Undergraduate", "Undergraduate", "Graduate", "Graduate"))
amortize_table %>%
ggplot(aes(fill=Student_type, y=Amortize_Time, x=Degree_type)) +
geom_bar(position="dodge", stat="identity") +
xlab("Degree") +
ylab("Time to Amortize in years")
mostWorthIt(canUndergrad, 4)
mostWorthIt(interUndergrad, 4)
mostWorthIt(canGrad, 2)
mostWorthIt(interGrad, 2)
leastWorthIt(canUndergrad, 4)
leastWorthIt(interUndergrad, 4)
leastWorthIt(canGrad, 2)
leastWorthIt(interGrad, 2)
lfs_ontario %>% filter(lfsstat !=4 & educ %in% 2:6) %>%
mutate(educ = factor(educ), unempl = (lfsstat == 3)) %>%
ggplot(aes(x=educ, fill=unempl))+
geom_bar(position = "fill")+
xlab("Educational attainment")+
labs(fill="Unemployed")
ontario_unemplrate = lfs_ontario %>%
summarise(UNEMPL = sum(lfsstat == 3)/sum(lfsstat!=4)) %>% pull()
lfs_ontario %>%
filter(educ %in% 2:6) %>% # lfsstat == 3  unemployed
mutate(educ = factor(educ)) %>%
group_by(educ) %>%
summarise(UNEMPLrate = sum(lfsstat == 3)/sum(lfsstat != 4)) %>%
arrange(UNEMPLrate) %>%
mutate(Difference_from_Ontario_UNEMPLrate = UNEMPLrate - ontario_unemplrate)
lfs_ontario %>% select(lfsstat, educ) %>%
filter(lfsstat !=4 & educ %in% 2:6) %>%
mutate(educ = factor(educ), unempl = factor(lfsstat == 3)) %>%
chisq_test(unempl ~ educ, data = .,
distribution = "approx")
lfs_ontario %>% filter(lfsstat !=4 & educ %in% c(5,6)) %>%
mutate(educ = factor(educ), unempl = factor(lfsstat == 3)) %>%
chisq_test(unempl ~ educ, data = .,
distribution = "approx")
lfs_ontario %>% filter(lfsstat !=4 & educ %in% c(4,6)) %>%
mutate(educ = factor(educ), unempl = factor(lfsstat == 3)) %>%
chisq_test(unempl ~ educ, data = .,
distribution = "approx")
lfs_ontario %>% filter(lfsstat !=4 & educ %in% c(4,5)) %>%
mutate(educ = factor(educ), unempl = factor(lfsstat == 3)) %>%
chisq_test(unempl ~ educ, data = .,
distribution = "approx")
lfs.ontario.aov=lfs_ontario %>%
filter(lfsstat !=4 & educ %in% 2:6) %>%
mutate(educ = factor(educ), unempl = (lfsstat == 3)) %>%
aov(unempl ~ educ, data=.)
TukeyHSD(lfs.ontario.aov)
