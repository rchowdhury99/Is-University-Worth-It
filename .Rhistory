mutate( predicted = ifelse(distance < 0, "B", "M")  ) %>%
xtabs(~ predicted + actual, data = .) %>% prop.table()
ggplot(glm_out, aes(x=X1, y=X2, col = actual)) + geom_point() + geom_abline(slope = 0.26986276/0.09617137, intercept = -0.3629454/0.09617137)
library(rpart)
rpart_out = rpart( actual ~ ., data = toy,
method = "class" )
rpart_out
toy %>% modelr::add_predictions( rpart_out, type = "class" ) %>%
xtabs( ~ pred + actual, data = .) %>% prop.table()
library(rpart)
rpart_out = rpart( actual ~ ., data = toy, method = "class")
rpart_out
toy %>% modelr::add_predictions( rpart_out, type = "class" ) %>%
xtabs( ~ pred + actual, data = .) %>% prop.table()
library(rpart)
rpart_out = rpart( actual ~ X1 + X2, data = toy, method = "class")
rpart_out
toy %>% modelr::add_predictions( rpart_out, type = "class" ) %>%
xtabs( ~ pred + actual, data = .) %>% prop.table()
library(rpart)
rpart_out = rpart( actual ~ X1 + X2, data = toy)
rpart_out
toy %>% modelr::add_predictions( rpart_out, type = "class" ) %>%
xtabs( ~ pred + actual, data = .) %>% prop.table()
library(rpart)
rpart_out = rpart( actual ~ X1 + X2, data = toy)
rpart_out
toy %>% modelr::add_predictions( rpart_out) %>%
xtabs( ~ pred + actual, data = .) %>% prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
toy %>%
modelr::add_predictions(rpart_out) %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
toy %>%
modelr::add_predictions(rpart_out) %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out) %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
predict(rpart_out, c(.5, 1))
predict(glm_out, c(.5, 1))
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(2)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(3)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(5)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(100)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(2)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head()
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(10)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
View(rpart_out)
library(rpart.plot)
rpart.plot(rpart_out)
? predict
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy)
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart.plot)
rpart.plot(rpart_out)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart.plot)
rpart.plot(rpart_out)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
library(rpart.plot)
rpart.plot(rpart_out)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
set.seed(1234)
toy = toy %>%
mutate( actual.rand = factor( sample( c(T,F), size = 100, replace = T ) ) )
ggplot(toy, aes(x = X1, y = X2, col = actual.rand) ) + geom_point()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "TRUE") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out) %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
install.packages("modelr")
install.packages("modelr")
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
library(tidyverse)
library(rpart)
library(ggplot2)
set.seed(123)
toy = tibble( X1 = rnorm(100), X2 = rnorm(100) ) %>%
mutate( actual = factor( X1^2 + X2^2 < 1.4 ) )
ggplot( toy, aes(x = X1, y = X2, col = actual )) + geom_point()
glm_out = glm(actual ~ X1 + X2, family = "binomial", data = toy)
broom::tidy(glm_out)
toy %>% modelr::add_predictions(glm_out, var = "distance") %>%
mutate( predicted = ifelse(distance < 0, "B", "M")  ) %>%
xtabs(~ predicted + actual, data = .) %>% prop.table()
ggplot(glm_out, aes(x=X1, y=X2, col = actual)) + geom_point() + geom_abline(slope = 0.26986276/0.09617137, intercept = -0.3629454/0.09617137)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
predict(rpart_out) %>% head(2)
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart.plot)
rpart.plot(rpart_out)
toy %>%
mutate(D = sqrt(X1^2 + X2^2)) %>%
gather(key, value, D) %>%
ggplot(aes(x = value, fill = actual)) +
geom_histogram(position = "dodge", bins = 30) +
facet_wrap(.~key, scales = "free")
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(tidyverse)
library(rpart)
library(ggplot2)
set.seed(123)
toy = tibble( X1 = rnorm(100), X2 = rnorm(100) ) %>%
mutate( actual = factor( X1^2 + X2^2 < 1.4 ) )
ggplot( toy, aes(x = X1, y = X2, col = actual )) + geom_point()
glm_out = glm(actual ~ X1 + X2, family = "binomial", data = toy)
broom::tidy(glm_out)
toy %>% modelr::add_predictions(glm_out, var = "distance") %>%
mutate( predicted = ifelse(distance < 0, "B", "M")  ) %>%
xtabs(~ predicted + actual, data = .) %>% prop.table()
ggplot(glm_out, aes(x=X1, y=X2, col = actual)) + geom_point() + geom_abline(slope = 0.26986276/0.09617137, intercept = -0.3629454/0.09617137)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart.plot)
rpart.plot(rpart_out)
predict(rpart_out, data.frame(X1=c(.5), X2=c(1)))
set.seed(1234)
toy = toy %>%
mutate( actual.rand = factor( sample( c(T,F), size = 100, replace = T ) ) )
ggplot(toy, aes(x = X1, y = X2, col = actual.rand) ) + geom_point()
toy %>% modelr::add_predictions(glm_out, var = "distance") %>%
mutate( predicted = ifelse(distance < 0, "FALSE", "TRUE")  ) %>%
xtabs(~ predicted + actual.rand, data = .) %>% prop.table()
toy %>% modelr::add_predictions( rpart_out, type = "class" ) %>%
xtabs( ~ pred + actual.rand, data = .) %>% prop.table()
toyd =
toy %>%
mutate(D = sqrt(X1^2 + X2^2)) %>%
gather(key, value, D) %>%
ggplot(aes(x = value, fill = actual)) +
geom_histogram(position = "dodge", bins = 30) +
geom_vline(xintercept = 1.18)
toyd =
toy %>%
mutate(distance = sqrt(X1^2 + X2^2)) %>%
gather(key, value, D) %>%
ggplot(aes(x = value, fill = actual)) +
geom_histogram(position = "dodge", bins = 30) +
geom_vline(xintercept = 1.18)
toyd =
toy %>%
mutate(distance = sqrt(X1^2 + X2^2)) %>%
gather(key, value, distance) %>%
ggplot(aes(x = value, fill = actual)) +
geom_histogram(position = "dodge", bins = 30) +
geom_vline(xintercept = 1.18)
toyd
toyd %>%
mutate(naive=T, predictions=ifelse(distance<1.18, T, F)) %>%
summarise(accuracy_prediction=mean(actual==predictions))
toyd =
toy %>%
mutate(distance = sqrt(X1^2 + X2^2)) %>%
gather(key, value, distance) %>%
ggplot(aes(x = value, fill = actual)) +
geom_histogram(position = "dodge", bins = 30) +
geom_vline(xintercept = 1.18)
toyd
toyd %>%
mutate(naive=T, predictions=ifelse(distance<1.18, T, F)) %>%
summarise(accuracy_prediction=mean(actual==predictions))
predict(rpart_out,newdata=tibble(X1=.5,X2=1),type = "class")
toyd =
toy %>%
mutate(distance = sqrt(X1^2 + X2^2)) %>%
gather(key, value, distance) %>%
ggplot(aes(x = value, fill = actual)) +
geom_histogram(position = "dodge", bins = 30) +
geom_vline(xintercept = 1.18)
toyd
toyd %>% mutate(naive=T,predictions=ifelse(distance<1.18,T,F)) %>% summarise(accuracy_prediction=mean(actual==predictions))
toyd =
toy %>% mutate(distance=(X1^2+X2^2) %>% sqrt())
new_toy%>% ggplot(aes(x=distance,fill=actual))+geom_histogram(bins = 30,position = "dodge")+geom_vline(xintercept=1.18)
toyd =
toy %>% mutate(distance=(X1^2+X2^2) %>% sqrt())
toyd%>% ggplot(aes(x=distance,fill=actual))+geom_histogram(bins = 30,position = "dodge")+geom_vline(xintercept=1.18)
toyd
toyd %>% mutate(naive=T, predictions = ifelse(distance < 1.18, T , F)) %>%
summarise(accuracy_prediction=mean(actual == predictions))
toyd =
toy %>% mutate(distance=(X1^2+X2^2) %>% sqrt())
toyd%>% ggplot(aes(x=distance,fill=actual))+geom_histogram(bins = 30,position = "dodge")+geom_vline(xintercept=1.18)
toyd %>% mutate(naive=T, predictions = ifelse(distance < 1.18, T , F)) %>%
summarise(accuracy_prediction=mean(actual == predictions))
toyd =
toy %>%
mutate(distance=(X1^2+X2^2) %>% sqrt())
toyd %>%
ggplot(aes(x=distance,fill=actual))+geom_histogram(bins = 30,position = "dodge")+geom_vline(xintercept=1.18)
toyd %>%
mutate(naive=T, predictions = ifelse(distance < 1.18, T , F)) %>%
summarise(accuracy_prediction=mean(actual == predictions))
toyd =
toy %>%
mutate(distance=(X1^2+X2^2) %>% sqrt())
toyd %>%
ggplot(aes(x=distance,fill=actual))+geom_histogram(bins = 30,position = "dodge")+geom_vline(xintercept=1.18)
toyd %>% mutate(naive=T, predictions = ifelse(distance < 1.18, T , F)) %>%
summarise(accuracy_prediction=mean(actual == predictions))
library(tidyverse)
library(rpart)
library(ggplot2)
set.seed(123)
toy = tibble( X1 = rnorm(100), X2 = rnorm(100) ) %>%
mutate( actual = factor( X1^2 + X2^2 < 1.4 ) )
ggplot( toy, aes(x = X1, y = X2, col = actual )) + geom_point()
glm_out = glm(actual ~ X1 + X2, family = "binomial", data = toy)
broom::tidy(glm_out)
toy %>% modelr::add_predictions(glm_out, var = "distance") %>%
mutate( predicted = ifelse(distance < 0, "B", "M")  ) %>%
xtabs(~ predicted + actual, data = .) %>% prop.table()
ggplot(glm_out, aes(x=X1, y=X2, col = actual)) + geom_point() + geom_abline(slope = 0.26986276/0.09617137, intercept = -0.3629454/0.09617137)
library(rpart)
rpart_out = rpart(actual ~ X1 + X2, data = toy, method = "class")
rpart_out
toy %>%
modelr::add_predictions(rpart_out, type = "class") %>%
xtabs( ~ pred + actual, data = .) %>%
prop.table()
library(rpart.plot)
rpart.plot(rpart_out)
predict(rpart_out,newdata=tibble(X1=.5,X2=1),type = "class")
toyd =
toy %>%
mutate(distance=(X1^2+X2^2) %>% sqrt())
toyd %>%
ggplot(aes(x=distance,fill=actual))+geom_histogram(bins = 30,position = "dodge")+geom_vline(xintercept=1.18)
toyd %>% mutate(naive=T, predictions = ifelse(distance < 1.18, T , F)) %>%
summarise(accuracy_prediction=mean(actual == predictions))
set.seed(1234)
toy = toy %>%
mutate( actual.rand = factor( sample( c(T,F), size = 100, replace = T ) ) )
ggplot(toy, aes(x = X1, y = X2, col = actual.rand) ) + geom_point()
toy %>% modelr::add_predictions(glm_out, var = "distance") %>%
mutate( predicted = ifelse(distance < 0, "FALSE", "TRUE")  ) %>%
xtabs(~ predicted + actual.rand, data = .) %>% prop.table()
toy %>% modelr::add_predictions( rpart_out, type = "class" ) %>%
xtabs( ~ pred + actual.rand, data = .) %>% prop.table()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page
library(tidyverse)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table()
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>% [[1]]
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE)[[1]]
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>% select(University)
## echo=FALSE stops the code chunk from appearing in the html document
## warning=FALSE / message=FALSE stop R warnings/messages from appearing in the knit document
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
univcan_data =
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>%
as.data.frame()
univcan_data = univcan_data[-1,]
univcan_data
URL = 'https://www.univcan.ca/universities/facts-and-stats/tuition-fees-by-university/'
page = read_html(url(URL))
univcan_data =
page %>%
html_nodes(xpath = '//*[@id="data_table"]') %>%
html_table(fill = TRUE) %>%
as.data.frame()
univcan_data = univcan_data[-1,]
univcan_data
domestic_undergraduate =
univcan_data %>%
mutate(domestic_undergraduate_tuition = str_extract(Undergraduate, "(\\d+)[^-*]*$")) %>%
select(University, domestic_undergraduate_tuition) %>% na.omit()
domestic_undergraduate$domestic_undergraduate_tuition =
as.numeric(gsub(",","",domestic_undergraduate$domestic_undergraduate_tuition))
domestic_undergraduate
######################################################################################################################
international_undergraduate =
univcan_data %>%
mutate(international_undergraduate_tuition = str_extract(Undergraduate.1, "(\\d+)[^-*]*$")) %>%
select(University, international_undergraduate_tuition) %>% na.omit()
international_undergraduate$international_undergraduate_tuition =
as.numeric(gsub(",","", international_undergraduate$international_undergraduate_tuition))
international_undergraduate
######################################################################################################################
domestic_graduate =
univcan_data %>%
mutate(domestic_graduate_tuition = str_extract(Graduate, "(\\d+)[^-*]*$")) %>%
select(University, domestic_graduate_tuition) %>% na.omit()
domestic_graduate$domestic_graduate_tuition =
as.numeric(gsub(",", "", domestic_graduate$domestic_graduate_tuition))
domestic_graduate
######################################################################################################################
international_graduate =
univcan_data %>%
mutate(international_graduate_tuition = str_extract(Graduate.1, "(\\d+)[^-*]*$")) %>%
select(University, international_graduate_tuition) %>% na.omit()
international_graduate$international_graduate_tuition =
as.numeric(gsub(",","", international_graduate$international_graduate_tuition))
international_graduate
domestic_undergraduate =
univcan_data %>%
mutate(domestic_undergraduate_tuition = str_extract(Undergraduate, "(\\d+)[^-*]*$")) %>%
select(University, domestic_undergraduate_tuition) %>% na.omit()
domestic_undergraduate$domestic_undergraduate_tuition =
as.numeric(gsub(",","",domestic_undergraduate$domestic_undergraduate_tuition))
domestic_undergraduate
######################################################################################################################
international_undergraduate =
univcan_data %>%
mutate(international_undergraduate_tuition = str_extract(Undergraduate.1, "(\\d+)[^-*]*$")) %>%
select(University, international_undergraduate_tuition) %>% na.omit()
international_undergraduate$international_undergraduate_tuition =
as.numeric(gsub(",","", international_undergraduate$international_undergraduate_tuition))
international_undergraduate
######################################################################################################################
domestic_graduate =
univcan_data %>%
mutate(domestic_graduate_tuition = str_extract(Graduate, "(\\d+)[^-*]*$")) %>%
select(University, domestic_graduate_tuition) %>% na.omit()
domestic_graduate$domestic_graduate_tuition =
as.numeric(gsub(",", "", domestic_graduate$domestic_graduate_tuition))
domestic_graduate
######################################################################################################################
international_graduate =
univcan_data %>%
mutate(international_graduate_tuition = str_extract(Graduate.1, "(\\d+)[^-*]*$")) %>%
select(University, international_graduate_tuition) %>% na.omit()
international_graduate$international_graduate_tuition =
as.numeric(gsub(",","", international_graduate$international_graduate_tuition))
international_graduate
domestic_undergraduate %>%
arrange(domestic_undergraduate_tuition) %>%
ggplot(aes(x=University, y = domestic_undergraduate_tuition)) + geom_point()
international_undergraduate %>%
arrange(international_undergraduate_tuition) %>%
ggplot(aes(x=University, y = international_undergraduate_tuition)) + geom_point()
domestic_international_undergraduate =
left_join(domestic_undergraduate, international_undergraduate, by = "University")
domestic_international_undergraduate %>%
ggplot(aes(x = University, y = Tuition, color = TypeOfStudent)) +
geom_point(aes(y = domestic_undergraduate_tuition, col = "Domestic")) +
geom_point(aes(y = international_undergraduate_tuition, col = "International"))
